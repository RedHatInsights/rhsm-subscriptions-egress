---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: swatch-egress-post-deploy-tests
objects:
- apiVersion: batch/v1
  kind: Job
  metadata:
    name: swatch-egress-post-deploy-tests-${IMAGE_TAG}-${UID}
    annotations:
      ignore-check.kube-linter.io/no-liveness-probe: Probes not required on Job pods
      ignore-check.kube-linter.io/no-readiness-probe: Probes not required on Job pods
  spec:
    backoffLimit: 2
    template:
      spec:
        imagePullSecrets:
        - name: quay-cloudservices-pull
        restartPolicy: Never
        containers:
        - image: ${IMAGE}:${IMAGE_TAG}
          name: swatch-egress-post-deploy-tests
          # TODO If we wanted to be a little more ambitious here, we could take all the egress table names
          # and move them to a ConfigMap.  Import that ConfigMap into the environment for this deployment
          # and then loop over every table to make sure the export is in S3.  However, egress is likely to be
          # replaced by floorist in the very near future so just checking the hosts table seems like an
          # acceptable solution in that timeframe.
          command: ["/bin/bash", "-c"]
          args:
          # Note that [[ is a bash specific builtin
          # This test isn't perfect.  It's actually testing that the *last* egress deployment was successful
          # since that is the deployment that would create the most recent CSV in S3
          - >-
            set -ex;
            LATEST=$(pipenv run aws s3 ls s3://${S3_BUCKET}/${ENVIRONMENT}/hosts/latest/ | awk '{print $1}');
            TODAY=$(date -I);
            if [[ "$LATEST" == "$TODAY" ]];
              then echo "Current egress S3 found";
              else echo "Most recent egress export is for $LATEST not $TODAY";
            fi
          resources:
            requests:
              memory: ${MEMORY_REQUEST}
              cpu: ${CPU_REQUEST}
            limits:
              memory: ${MEMORY_LIMIT}
              cpu: ${CPU_LIMIT}
          env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: egress-s3
                key: aws_access_key_id
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: egress-s3
                key: aws_secret_access_key
          - name: S3_BUCKET
            valueFrom:
              secretKeyRef:
                name: egress-s3
                key: bucket
          - name: ENVIRONMENT
            value: ${ENVIRONMENT}

parameters:
- name: IMAGE
  value: quay.io/redhat-services-prod/rh-subs-watch-tenant/rhsm-subscriptions-egress
- name: IMAGE_TAG
  value: latest
- name: UID
  description: "Unique name suffix"
  generate: expression
  from: "[a-z0-9]{6}"
- name: MEMORY_REQUEST
  value: 256Mi
- name: MEMORY_LIMIT
  value: 256Mi
- name: CPU_REQUEST
  value: 250m
- name: CPU_LIMIT
  value: 500m
- name: ENVIRONMENT
