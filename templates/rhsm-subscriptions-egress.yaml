apiVersion: v1
kind: Template
labels:
  app: rhsm-subscriptions
  template: rhsm-subscriptions-egress
metadata:
  annotations:
    description: RHEL-based container for interop between postgres and s3.
  name: rhsm-subscriptions-egress

parameters:
  - name: EXPORTED_TABLES
    value: account_config account_services billable_usage_remittance events host_tally_buckets hosts instance_measurements offering org_config subscription subscription_capacity tally_measurements tally_snapshots
  - name: IMAGE_TAG
    value: latest
  - name: MEMORY_REQUEST
    value: 256Mi
  - name: MEMORY_LIMIT
    value: 256Mi
  - name: CPU_REQUEST
    value: 250m
  - name: CPU_LIMIT
    value: 500m
  - name: ENVIRONMENT

objects:
- apiVersion: batch/v1
  kind: CronJob
  metadata:
    name: rhsm-subscriptions-egress
    annotations:
      ignore-check.kube-linter.io/no-liveness-probe: The cronjob is being deprecated for an alternate method. No probe to be added due to change in implementation
      ignore-check.kube-linter.io/no-readiness-probe: The cronjob is being deprecated for an alternate method. No probe to be added due to change in implementation
      ignore-check.kube-linter.io/default-service-account: The cronjob is being deprecated for an alternate method. No probe to be added due to change in implementation
  spec:
    schedule: "@daily"
    jobTemplate:
      spec:
        activeDeadlineSeconds: 57600
        template:
          spec:
            restartPolicy: Never
            imagePullSecrets:
              - name: quay-cloudservices-pull
            containers:
            - image: quay.io/cloudservices/rhsm-subscriptions-egress:${IMAGE_TAG}
              imagePullPolicy: Always
              name: rhsm-subscriptions-egress
              command: ["/bin/sh", "-c"]
              args:
              - >-
                set -ex;
                for table in $EXPORTED_TABLES; do
                  echo "Table '${table}': Data collection started.";
                  psql -h $POSTGRESQL_SERVICE_HOST -U $POSTGRESQL_USER $POSTGRESQL_DATABASE -c "COPY $table TO STDOUT CSV" |
                  pipenv run aws s3 cp - s3://${S3_BUCKET}/${ENVIRONMENT}/${table}/historic/$(date -I)-${table}.csv;
                  pipenv run aws s3 cp s3://${S3_BUCKET}/${ENVIRONMENT}/${table}/historic/$(date -I)-${table}.csv s3://${S3_BUCKET}/${ENVIRONMENT}/${table}/latest/full_data.csv;
                  echo "Table '${table}': Dump uploaded to intermediate storage.";
                done;
                echo "Success.";
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
              env:
              - name: POSTGRESQL_SERVICE_HOST
                valueFrom:
                  secretKeyRef:
                    name: swatch-tally-db
                    key: db.host
              - name: POSTGRESQL_USER
                valueFrom:
                  secretKeyRef:
                    name: swatch-tally-db
                    key: db.user
              - name: POSTGRESQL_DATABASE
                valueFrom:
                  secretKeyRef:
                    name: swatch-tally-db
                    key: db.name
              - name: PGPASSWORD
                valueFrom:
                  secretKeyRef:
                    name: swatch-tally-db
                    key: db.password
              - name: AWS_ACCESS_KEY_ID
                valueFrom:
                  secretKeyRef:
                    name: egress-s3
                    key: aws_access_key_id
              - name: AWS_SECRET_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    name: egress-s3
                    key: aws_secret_access_key
              - name: S3_BUCKET
                valueFrom:
                  secretKeyRef:
                    name: egress-s3
                    key: bucket
              - name: EXPORTED_TABLES
                value: ${EXPORTED_TABLES}
              - name: ENVIRONMENT
                value: ${ENVIRONMENT}
